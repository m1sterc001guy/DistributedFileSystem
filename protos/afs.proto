syntax = "proto3";

option java_package = "afs.grpc";

package afsgrpc;

service AfsService {
  rpc SendString (StringMessage) returns (StringMessage) {}
  rpc ReadDir (ReadDirMessage) returns (ReadDirReply) {}
  rpc GetAttr (GetAttrRequest) returns (GetAttrResponse) {}
  rpc OpenFile (OpenRequest) returns (OpenResponse) {}
  rpc ReadFile (ReadRequest) returns (ReadResponse) {}
  rpc WriteFile (WriteRequest) returns (WriteResponse) {}
  rpc MkDir (MkDirRequest) returns (MkDirResponse) {}
  rpc RmDir (RmDirRequest) returns (RmDirResponse) {}
  rpc AccessFile(AccessRequest) returns (AccessResponse) {}
  rpc MkNod (MkNodRequest) returns (MkNodResponse) {}
}

// Different fields must use different numbers, cannot reuse numbers
// Fields marked repeated are arrays
// Can only have primitive types in these messages (can't send the stat struct)

message StringMessage {
  string stringmessage = 1;
}

message ReadDirMessage {
  string path = 1;
}

message ReadDirReply {
  repeated int64 inodenumber = 1;
  repeated int32 type = 2;
  repeated string name = 3;
}

message GetAttrRequest {
  string path = 1;
}

message GetAttrResponse {
  int64 dev = 1;
  int64 ino = 2;
  int32 mode = 3;
  int64 nlink = 4;
  int32 uid = 5;
  int32 gid = 6;
  int64 rdev = 7;
  int64 size = 8;
  int64 atime = 9;
  int64 mtime = 10;
  int64 ctime = 11;
  int64 blksize = 12;
  int64 blocks = 13;
  int32 res = 14;
}

message MkDirRequest {
  string path = 1;
  int32 mode = 2;
}

message MkDirResponse {
  int32 res = 1;
}

message RmDirRequest {
  string path = 1;
}

message RmDirResponse {
  int32 res = 1;
}

message MkNodRequest {
  string path = 1;
  int32 mode = 2;
  int64 rdev = 3;
}

message MkNodResponse {
  int32 res = 1;
}

message ReadRequest {
  string path = 1;
  int64 size = 2;
  int64 offset = 3;
}

message ReadResponse {
  string buf = 1;
  int32 res = 2;
}

message OpenRequest {
  string path = 1;
  int32 flags = 2;
}

message OpenResponse {
  int32 res = 1;
}

message WriteRequest {
  string path = 1;
  string buf = 2;
  int64 size = 3;
  int64 offset = 4;
}

message WriteResponse {
  int32 res = 1;
}

message AccessRequest {
  string path = 1;
  int32 mask = 2;
}

message AccessResponse {
  int32 res = 1;
}
